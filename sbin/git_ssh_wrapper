#!/usr/bin/python
import os, sys, re, imp, subprocess
import MySQLdb as mysql

# Global options
TRACKIT_CONFIG_FILE = '/data/forgemgr/trackit.conf'
GIT_APP_PATH = '/usr/bin'

# Function to load the configuration from a Python script
def load_config(filename):
	d = imp.new_module('config')
	d.__file__ = filename
	try:
		with open(filename) as config_file:
			exec(compile(config_file.read(), filename, 'exec'), d.__dict__)
	except IOError as e:
		print >> sys.stderr, ('Unable to load configuration file (%s)' % e.strerror)
		sys.exit(1)
	config = {}
	for key in dir(d):
		if key.isupper():
			config[key] = getattr(d, key)
		
	return config

# If SSH_ORIGINAL_COMMAND is not set, then either someone has just tried to SSH 
# in, or Git has failed to provide a command to run
if 'SSH_ORIGINAL_COMMAND' not in os.environ:
	print >> sys.stderr, 'SSH not allowed on the ' + os.environ['USER'] + ' account'
	sys.exit(1)

# Get the command that Git requested
command = os.environ['SSH_ORIGINAL_COMMAND']

# Ensure we've got a username on the command line in authorized_keys
if len(sys.argv) == 1:
	print >> sys.stderr, 'Username not specified - invalid configuration in authorized_keys'
	sys.exit(1)

# Validate the username
if re.search(r'^[A-Za-z0-9]+$', sys.argv[1]) is None:
	print >> sys.stderr, 'Invalid username (' + sys.argv[1] + ') - invalid configuration in authorized_keys'
	print str(blah)
	sys.exit(1)

# Store the username from the command line (as specified in .ssh/authorized_keys)
user = sys.argv[1]

# Run a regex on the git command
command_search = re.search(r'^git[ -](?P<command>upload|receive)-pack \'(?P<repository>.*)\'', command)

# Validate the command requested
if command_search is None:
	print >> sys.stderr, 'Invalid Git command'
	sys.exit(1)

# Load the configuration
config = load_config(TRACKIT_CONFIG_FILE)

# Connect to the database
db = mysql.connect(config['DB_SERV'], config['DB_USER'], config['DB_PASS'], config['DB_NAME'])
cur = db.cursor(mysql.cursors.DictCursor)

# Extract parts from the above regex
git_subcommand = command_search.group('command')
git_repository = command_search.group('repository')

# Query the database to see if the user has the permission
# - The query does a massive join between four tables to link usernames, team names and permissions
# - The WHERE clause then narrows down the join to the individual repo...
# - ...and then searches for team members who have team access to the repo...
# - ...or users who have user access to the repo.
# - The MAX() on the permissions means you get the greatest access between team and user if both exist
cur.execute("SELECT MAX(`rules`.`src`) AS `permission` FROM ((`rules` LEFT JOIN `teams` ON `teams`.`name` = `rules`.`name`AND `rules`.`source` = 'team') LEFT JOIN `team_members` ON `team_members`.`tid` = `teams`.`id`) JOIN `repos` ON `repos`.`id` = `rules`.`rid` WHERE `repos`.`name` = %s AND ((`rules`.`source` = 'team' AND `team_members`.`username` = %s) OR (`rules`.`source` = 'internal' AND `rules`.`name` = %s));", (git_repository, user, user))

# Fetch the permission result (0 = no access, 1 = read-only, 2 = read-write)
result = cur.fetchone()

# If there are no results, then there are no rules for the user, hence no access
if result is None:
	print >> sys.stderr, "Permission denied (no access to repository defined)"
	sys.exit(1)

if result['permission'] == 2:
	# Read-write permission - do whatever command they requested
	sys.exit(subprocess.call([GIT_APP_PATH + '/git-' + git_subcommand + '-pack', config['GIT_ROOT'] + '/' + git_repository]))
elif result['permission'] == 1:
	# Read-only permission - only allow git-receive-pack
	if git_subcommand == "receive":
		sys.exit(subprocess.call([GIT_APP_PATH + '/git-receive-pack', config['GIT_ROOT'] + '/' + git_repository]))
	else:
		print >> sys.stderr, "No write access allowed"
elif result['permission'] == 0:
	print >> sys.stderr, "Permission denied to repository"

# Error code for permission denied
sys.exit(2)
