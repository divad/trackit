#!/usr/bin/python
#
# This file is part of trackit.
#
# trackit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# trackit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with trackit.  If not, see <http://www.gnu.org/licenses/>.

import Pyro4
import syslog
import signal
import sys
import os.path
import os
import subprocess
import re
import ConfigParser

## should run as apache. then run sudo to do restart.

SVN_ROOT  = '/data/svnroot/'
TRAC_ROOT = '/data/tracroot/'
VERSION = 0.1

Pyro4.config.SERVERTYPE = "multiplex"
Pyro4.config.SOCK_REUSE = True

class TracKitDaemon(object):

	def __init__(self):
		syslog.openlog("trackitd",syslog.LOG_PID)
		syslog.syslog('Starting trackitd/' + str(VERSION))
		
	def sysexec(self,command):
		commands = command.split(' ')
		proc = subprocess.Popen(commands,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		(stdoutdata, stderrdata) = proc.communicate()
		return (proc.returncode,stdoutdata,stderrdata)
		
	def svn_create(self,name,svn_path):
		rcode, stdoutdata, stderrdata = self.sysexec('/usr/bin/svnadmin create ' + svn_path)
		if rcode > 0:
			print "Could not create subversion repository: error code " + str(rcode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Created svn repo " + svn_path
			
	def trac_create(self,name,trac_path,svn_path,repo_description="Test Desc"):
		rcode, stdoutdata, stderrdata = self.sysexec('/usr/bin/trac-admin ' + trac_path + ' initenv ' + name + ' sqlite:db/trac.db svn ' + svn_path)

		if rcode > 0:
			print "Could not create trac instance: error code " + str(rcode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Created trac instance " + trac_path
			
			
		## Open the config file
		print str(os.path.join(trac_path,'conf','trac.ini'))
		
		config_path = os.path.join(trac_path,'conf','trac.ini')
		
		tconfig = ConfigParser.RawConfigParser()
		tconfig.read(config_path)

		## LOGO
		tconfig.set('header_logo','src','https://www.southampton.ac.uk/images/bg_logo_small.png')
		tconfig.set('header_logo','alt','Trac')
		tconfig.set('header_logo','link','https://trac.soton.ac.uk/' + name + '/')
		
		## Enable SVN component
		tconfig.add_section('components')
		tconfig.set('components','tracopt.versioncontrol.svn.*','enabled')

		## email notifications
		tconfig.set('notification','always_notify_owner','true')
		tconfig.set('notification','always_notify_reporter','true')
		tconfig.set('notification','always_notify_updater','true')
		tconfig.set('notification','smtp_default_domain','soton.ac.uk')
		tconfig.set('notification','smtp_enabled','true')
		tconfig.set('notification','smtp_from','noreply@soton.ac.uk')
		tconfig.set('notification','smtp_replyto','noreply@soton.ac.uk')
		
		## other settings
		tconfig.set('project','admin','noreply@soton.ac.uk')
		tconfig.set('project','descr',repo_description)
		
		with open(config_path,'wb') as cfp:
			tconfig.write(cfp)
		
	def trac_add_admin(self,trac_path,username):	
		rcode, stdoutdata, stderrdata = self.sysexec('/usr/bin/trac-admin ' + trac_path + ' permission add ' + username + ' TRAC_ADMIN')		

		if rcode > 0:
			print "Could not grant admin permission for user " + username + " on trac instance " + trac_path + ". Error code: " + str(rcode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Granted TRAC_ADMIN to " + username + " on instance " + trac_path
			
	def trac_remove_admin(self,trac_path,username):	
		rcode, stdoutdata, stderrdata = self.sysexec('/usr/bin/trac-admin ' + trac_path + ' permission remove ' + username + ' TRAC_ADMIN')		

		if rcode > 0:
			print "Could not remove admin permission for user " + username + " on trac instance " + trac_path + ". Error code: " + str(rcode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Revoked TRAC_ADMIN to " + username + " on instance " + trac_path
			
	def repo_create(self,name,src_type,web_type):
		if not re.search(r'^[a-zA-Z0-9_\-]{3,50}$', name):
			## TODO bettar error
			return False
			
		## we only support svn atm
		if not src_type == 'svn': 
			## TODO bettar error
			return False			
			
			
		if src_type == 'svn': 
			## Check svn folder does not exist
			svn_path = os.path.join(SVN_ROOT,name)
			if os.path.lexists(name):
				## TODO bettar errors
				return False
				
			result = self.svn_create(name,svn_path)
			
		if web_type == 'trac':

			## Check trac folder does not exist
			trac_path = os.path.join(TRAC_ROOT,name)
			if os.path.lexists(name):
				## TODO bettar errors
				return False
				
			result = self.trac_create(name,trac_path,svn_path)
			self.trac_add_admin(trac_path,'db2z07')
			
		## re-generate authz file
		## generate file for the trac ldap auth 
		## 
		

def signal_handler_term(signal, frame):
	signal_handler('SIGTERM')
	
def signal_handler_int(signal, frame):
	signal_handler('SIGINT')
		
def signal_handler(signal):
	syslog.syslog('Caught signal ' + str(signal) + ' - exiting trackitd/' + str(VERSION))
	Pyro4.core.Daemon.shutdown(pyro_daemon)
	sys.exit(0)

if __name__ == "__main__":
	## Drop privileges
	os.setgid(48)
	os.setuid(48)
	
	## Set up the daemon
	trackit     = TracKitDaemon()
	signal.signal(signal.SIGTERM, signal_handler_term)
	signal.signal(signal.SIGINT, signal_handler_int)
	pyro_daemon = Pyro4.Daemon(host='localhost',port=1888)
	#pyro_daemon._pyroHmacKey = b"secretkey1234"
	uri         = pyro_daemon.register(trackit,'trackit-daemon')
	syslog.syslog('Reading to serve clients on URI: ' + str(uri))
	pyro_daemon.requestLoop()
