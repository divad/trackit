#!/usr/bin/python
#
# This file is part of trackit.
#
# trackit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# trackit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with trackit.  If not, see <http://www.gnu.org/licenses/>.

import Pyro4
import syslog
import signal
import sys
import os.path
import os
import subprocess
import re
import ConfigParser
import MySQLdb as mysql
import traceback # remove

SECURITY_KEY = 'changeme'
SET_UID=48
SET_GID=48
SVN_ROOT  = '/data/svnroot/'
TRAC_ROOT = '/data/tracroot/'
TRAC_CONF_DIR = '/data/trac.d'
SVN_AUTHZ_FILE = '/data/svn_authz_auth'
VERSION = 0.2
DB_SERV='mysql536.soton.ac.uk'
DB_NAME='tracsvn'
DB_USER='tracsvn'
DB_PASS='zgg53v8Zu60W0hzy'
DB_PORT='3306'

Pyro4.config.SERVERTYPE = "multiplex"
Pyro4.config.SOCK_REUSE = True

class TracKitDaemon(object):

	def __init__(self):
		## Open syslog 
		syslog.openlog("trackitd",syslog.LOG_PID)
		syslog.syslog('Starting trackitd/' + str(VERSION))

################################################################################
		
	def db_connect(self):
		## Connect to MySQL
		self.db = mysql.connect(DB_SERV,DB_USER,DB_PASS,DB_NAME)
		return self.db.cursor(mysql.cursors.DictCursor)

################################################################################
		
	def db_close(self):
		self.db.close()
		
################################################################################
		
	def sysexec(self,command):
		commands = command.split(' ')
		proc = subprocess.Popen(commands,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		(stdoutdata, stderrdata) = proc.communicate()
		return (proc.returncode,stdoutdata,stderrdata)
		
################################################################################
		
	def svn_create(self,name,svn_path):
		rcode, stdoutdata, stderrdata = self.sysexec('/usr/bin/svnadmin create ' + svn_path)
		if rcode > 0:
			print "Could not create subversion repository: error code " + str(rcode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Created svn repo " + svn_path
			
################################################################################
			
	def trac_create(self,name,trac_path,svn_path,repo_description="Test Desc"):
		rcode, stdoutdata, stderrdata = self.sysexec('/usr/bin/trac-admin ' + trac_path + ' initenv ' + name + ' sqlite:db/trac.db svn ' + svn_path)

		if rcode > 0:
			print "Could not create trac instance: error code " + str(rcode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Created trac instance " + trac_path
			
		## Open the config file
		print str(os.path.join(trac_path,'conf','trac.ini'))
		
		config_path = os.path.join(trac_path,'conf','trac.ini')
		
		tconfig = ConfigParser.RawConfigParser()
		tconfig.read(config_path)

		## LOGO
		tconfig.set('header_logo','src','https://www.southampton.ac.uk/images/bg_logo_small.png')
		tconfig.set('header_logo','alt','Trac')
		tconfig.set('header_logo','link','https://trac.soton.ac.uk/' + name + '/')
		
		## Enable SVN component
		tconfig.add_section('components')
		tconfig.set('components','tracopt.versioncontrol.svn.*','enabled')

		## email notifications
		tconfig.set('notification','always_notify_owner','true')
		tconfig.set('notification','always_notify_reporter','true')
		tconfig.set('notification','always_notify_updater','true')
		tconfig.set('notification','smtp_default_domain','soton.ac.uk')
		tconfig.set('notification','smtp_enabled','true')
		tconfig.set('notification','smtp_from','noreply@soton.ac.uk')
		tconfig.set('notification','smtp_replyto','noreply@soton.ac.uk')
		
		## other settings
		tconfig.set('project','admin','noreply@soton.ac.uk')
		tconfig.set('project','descr',repo_description)
		
		with open(config_path,'wb') as cfp:
			tconfig.write(cfp)
			
		## Create the auth file
		self.trac_auth_config(name)
		
		## Restart httpd :(
		self.server_graceful()

################################################################################	
		
	def server_graceful(self):
		rcode, stdoutdata, stderrdata = self.sysexec('/usr/bin/sudo -n /usr/sbin/apachectl graceful')

		if rcode > 0:
			print "Could not graceful restart apache!" + str(rcode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Apache graceful restart successful"
		
################################################################################	
		
	def trac_auth_config(self,name):
	
		## connect to db
		## get repo from DB
		## get all the users (select from rules)
		## get all the teams, and explode to a users hash? (select from rules)
			## select members from each team
			
		try:
			
			curd = self.db_connect()
			curd.execute('SELECT * FROM `repos` WHERE `name` = %s',(name))
			repo = curd.fetchone()
			
			if not repo == None:
				## create set
				
				required_users = set()
				
				## get rules now
				
				curd.execute('SELECT * FROM `rules` WHERE `rid` = %s', (repo['id']))
				rules = curd.fetchall()	

				for rule in rules:
					print "trac-ldap: found rule id " + str(rule['id'])
					
					## if rule has trac access
					if rule['web'] == 1:
						print "rule is WEB APPROVED"
		
						if rule['source'] == 'internal':
							print "adding " + rule['name']
							required_users.add(rule['name'])
							
						elif rule['source'] == 'team':
						
							print "dealing with team " + rule['name']
							
							## get the team members 
							curd.execute('SELECT * FROM `teams` WHERE `name` = %s',(rule['name']))
							team = curd.fetchone()
							
							if not team == None:
								## get members 
								curd.execute('SELECT * FROM `team_members` WHERE `tid` = %s', (team['id']))
								members = curd.fetchall()
								
								for member in members:
									required_users.add(member['username'])
						
						## TODO add AD GROUPS source

						
			location = "/trac/" + name 
			
			if repo['web_security'] == 1:
				location = location + "/login"
						
			users_string = ""
			for user in required_users:
				users_string = users_string + user + " "
		
			f = open(os.path.join(TRAC_CONF_DIR, name + ".conf"), 'w')
			f.write("""<Location %s>
	AuthType Basic
	AuthName "%s Trac Project"
	AuthBasicProvider ldap
	AuthLDAPUrl ldaps://nlbldap.soton.ac.uk/dc=soton,dc=ac,dc=uk?cn??
	Require ldap-user %s
	</Location>
	""" % (
				location,
				name,
				users_string,
			))
		
			f.close()
		except Exception as ex:
			print "argh nooooo: " + str(ex)
			traceback.print_exc()
		
		print "Wrote config file, maybe"
			
################################################################################	
		
	def trac_add_admin(self,trac_path,username):	
		rcode, stdoutdata, stderrdata = self.sysexec('/usr/bin/trac-admin ' + trac_path + ' permission add ' + username + ' TRAC_ADMIN')		

		if rcode > 0:
			print "Could not grant admin permission for user " + username + " on trac instance " + trac_path + ". Error code: " + str(rcode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Granted TRAC_ADMIN to " + username + " on instance " + trac_path

################################################################################
			
	def trac_remove_admin(self,trac_path,username):	
		rcode, stdoutdata, stderrdata = self.sysexec('/usr/bin/trac-admin ' + trac_path + ' permission remove ' + username + ' TRAC_ADMIN')		

		if rcode > 0:
			print "Could not remove admin permission for user " + username + " on trac instance " + trac_path + ". Error code: " + str(rcode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Revoked TRAC_ADMIN to " + username + " on instance " + trac_path

################################################################################
			
	def regenerate_authz_file(self):
		## regenerate the entire authz file
		zconfig = ConfigParser.RawConfigParser()
		
		
		## Generate teams
		zconfig.add_section('groups')
		curd = self.db_connect()
		curd.execute('SELECT * FROM `teams` ORDER BY `name`')
		teams = curd.fetchall()
		
		for team in teams:
			curd.execute('SELECT * FROM `team_members` WHERE `tid` = %s', (team['id']))
			members = curd.fetchall()
			
			memberstr = ""
			for member in members:
				memberstr += " " + member['username'] + ","
				
			if memberstr.endswith(','):
				## remove the trailing comma and starting space
				memberstr = memberstr[1:-1]
				zconfig.set('groups',team['name'],memberstr)
				print "Wrote out team " + team['name']
			else:
				## no members
				print "Team " + team['name'] + " has no members"
				continue
				
		## Generate each repo rules
		curd.execute('SELECT * FROM `repos`')
		repos = curd.fetchall()
		
		for repo in repos:
			section_name = repo['name'] + ":/"
			zconfig.add_section(section_name)
			print "Processing repo " + repo['name']
			curd.execute('SELECT * FROM `rules` WHERE `rid` = %s', (repo['id']))
			rules = curd.fetchall()	

			for rule in rules:
				print "found rule id " + str(rule['id'])
				if rule['source'] == 'internal':
					prefix = ""
				elif rule['source'] == 'team':
					prefix = "@"
				else:
					continue
					
				if int(rule['src']) == 1:
					zconfig.set(section_name,prefix + rule['name'],'r')
				elif int(rule['src']) == 2:
					zconfig.set(section_name,prefix + rule['name'],'rw')
		
		with open('/tmp/authz_test','wb') as cfp:
			zconfig.write(cfp)
			
		print "Wrote out new authz file"
		
		curd.close()
		self.db_close()
		
################################################################################

			
	def repo_create(self,name,src_type,web_type):
		if not re.search(r'^[a-zA-Z0-9_\-]{3,50}$', name):
			## TODO bettar error
			return False
			
		## we only support svn atm
		if not src_type == 'svn': 
			## TODO bettar error
			return False			
			
		if src_type == 'svn': 
			## Check svn folder does not exist
			svn_path = os.path.join(SVN_ROOT,name)
			if os.path.lexists(name):
				## TODO bettar errors
				return False
				
			result = self.svn_create(name,svn_path)
			
		if web_type == 'trac':

			## Check trac folder does not exist
			trac_path = os.path.join(TRAC_ROOT,name)
			if os.path.lexists(name):
				## TODO bettar errors
				return False
				
			result = self.trac_create(name,trac_path,svn_path)
			self.trac_add_admin(trac_path,'db2z07')
			
		self.regenerate_authz_file()

################################################################################

def signal_handler_term(signal, frame):
	signal_handler('SIGTERM')
	
################################################################################
	
def signal_handler_int(signal, frame):
	signal_handler('SIGINT')
	
################################################################################
		
def signal_handler(signal):
	syslog.syslog('Caught signal ' + str(signal) + ' - exiting trackitd/' + str(VERSION))
	Pyro4.core.Daemon.shutdown(pyro_daemon)
	sys.exit(0)

################################################################################
	
if __name__ == "__main__":
	## Drop privileges
	os.setgid(SET_GID)
	os.setuid(SET_UID)
	
	## Set up the daemon
	trackit     = TracKitDaemon()
	signal.signal(signal.SIGTERM, signal_handler_term)
	signal.signal(signal.SIGINT, signal_handler_int)
	pyro_daemon = Pyro4.Daemon(host='localhost',port=1888)
	pyro_daemon._pyroHmacKey = SECURITY_KEY
	uri         = pyro_daemon.register(trackit,'trackit-daemon')
	syslog.syslog('Ready to serve clients on URI: ' + str(uri))
	pyro_daemon.requestLoop()
