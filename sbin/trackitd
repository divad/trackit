#!/usr/bin/python
#
# This file is part of trackit.
#
# trackit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# trackit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with trackit.  If not, see <http://www.gnu.org/licenses/>.

import Pyro4
import syslog
import signal
import sys
import os.path
import os
import subprocess
import re

## should run as apache. then run sudo to do restart.

SVN_ROOT  = '/data/svnroot/'
TRAC_ROOT = '/data/tracroot/'
VERSION = 0.1

Pyro4.config.SERVERTYPE = "multiplex"

class TracKitDaemon(object):

	def __init__(self):
		syslog.openlog("trackitd",syslog.LOG_PID)
		syslog.syslog('Starting trackitd/' + str(VERSION))
		
	def svn_create(self,name,svn_path):
		#os.mkdir(svn_path)
		
		svnadmin = subprocess.Popen(['svnadmin', 'create', svn_path],stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		(stdoutdata, stderrdata) = svnadmin.communicate()

        ## Handle errors
		if svnadmin.returncode > 0:
			print "Could not create repository: " + str(svnadmin.returncode)
			print stdoutdata
			print stderrdata
			return False
		else:
			print "Created svn repo"
			
	def repo_create(self,name,src_type,web_type):
		if not re.search(r'^[a-zA-Z0-9_\-]{3,50}$', name):
			## TODO bettar error
			return False
			
		## we only support svn atm
		if not src_type == 'svn': 
			## TODO bettar error
			return False			
			
			
		if src_type == 'svn': 
			## Check svn folder does not exist
			svn_path = os.path.join(SVN_ROOT,name)
			if os.path.lexists(name):
				## TODO bettar errors
				return False
				
			self.svn_create(name,svn_path)
			
		if web_type == 'trac':

			## Check trac folder does not exist
			trac_path = os.path.join(TRAC_ROOT,name)
			if os.path.lexists(name):
				## TODO bettar errors
				return False
				
			#self.trac_create(name)
		

def signal_handler_term(signal, frame):
	signal_handler('SIGTERM')
	
def signal_handler_int(signal, frame):
	signal_handler('SIGINT')
		
def signal_handler(signal):
	syslog.syslog('Caught signal ' + str(signal) + ' - exiting trackitd/' + str(VERSION))
	Pyro4.core.Daemon.shutdown(pyro_daemon)
	sys.exit(0)

if __name__ == "__main__":
	trackit     = TracKitDaemon()
	signal.signal(signal.SIGTERM, signal_handler_term)
	signal.signal(signal.SIGINT, signal_handler_int)
	pyro_daemon = Pyro4.Daemon(host='localhost',port=18)
	uri         = pyro_daemon.register(trackit,'trackit-daemon')
	syslog.syslog('Reading to serve clients on URI: ' + str(uri))
	pyro_daemon.requestLoop()